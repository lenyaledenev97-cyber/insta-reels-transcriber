# main.py
import os
import re
import asyncio
import logging
from typing import List

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    filters
)

from yt_dlp import YoutubeDL
from openai import OpenAI

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET     = os.getenv("WEBHOOK_SECRET", "").strip()
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY", "").strip()
ALLOWED_CHATS_RAW  = os.getenv("ALLOWED_CHATS", "").strip()  # "123,456"

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ALLOWED_CHATS: List[int] = []
if ALLOWED_CHATS_RAW:
    try:
        ALLOWED_CHATS = [int(x) for x in ALLOWED_CHATS_RAW.split(",") if x.strip()]
    except Exception:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫
        ALLOWED_CHATS = []

# OpenAI –∫–ª–∏–µ–Ω—Ç
oai = OpenAI(api_key=OPENAI_API_KEY)

# ---------- Telegram ----------
app_tg = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–≥–µ–∫—Å –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ Instagram Reels
RE_REELS = re.compile(
    r"(https?://(?:www\.)?instagram\.com/(?:reel|reels)/[^\s/?#]+(?:\?[^\s]*)?)",
    re.IGNORECASE
)

def chat_allowed(chat_id: int) -> bool:
    if not ALLOWED_CHATS:
        return True
    return chat_id in ALLOWED_CHATS

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not chat_allowed(update.effective_chat.id):
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels ‚Äî –≤–µ—Ä–Ω—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.\n"
        "–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∂–∏–≤ üòâ"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.effective_chat.id
    if not chat_allowed(chat_id):
        return

    text = (update.message.text or "").strip()

    m = RE_REELS.search(text)
    if not m:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    reels_url = m.group(1)
    await update.message.reply_text("–°–µ–∫—É–Ω–¥—É, —Å–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –∑–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é‚Ä¶")

    try:
        transcript = await download_and_transcribe(reels_url)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        await update.message.reply_text(
            f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {e}\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –¥—Ä—É–≥—É—é."
        )
        return

    if not transcript:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ üòï")
        return

    # –†–µ–∂–µ–º –ø–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π –¥–ª–∏–Ω–Ω–æ–π —Ä–µ—á–∏
    chunks = [transcript[i:i+3500] for i in range(0, len(transcript), 3500)]
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∏–∂–µ üëá")
    for i, ch in enumerate(chunks, 1):
        prefix = f"–ß–∞—Å—Ç—å {i}/{len(chunks)}:\n" if len(chunks) > 1 else ""
        await update.message.reply_text(prefix + ch)


async def download_and_transcribe(url: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ (–±–µ–∑ ffmpeg), –æ—Ç–¥–∞—ë–º –≤ OpenAI gpt-4o-mini-transcribe.
    OpenAI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—É–¥–∏–æ-—Ñ–æ—Ä–º–∞—Ç—ã mp4/m4a/webm/mp3/wav –∏ —Ç.–ø.
    """
    # yt-dlp –±–ª–æ–∫–∏—Ä—É—é—â–∏–π ‚Äî –≤—ã–Ω–æ—Å–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    def _download_audio(tmpdir: str) -> str:
        # –°–∫–∞—á–∏–≤–∞–µ–º bestaudio, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ tmpdir. –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –ø–æ–ª—É—á–∏–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": os.path.join(tmpdir, "%(id)s.%(ext)s"),
            "quiet": True,
            "noprogress": True,
            "nocheckcertificate": True,
            # –ò–Ω–æ–≥–¥–∞ IG –ø—Ä–æ—Å–∏—Ç –∫—É–∫–∏, –Ω–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –æ–±—ã—á–Ω–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç
        }
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            return filename  # –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (—á–∞—â–µ .m4a –∏–ª–∏ .mp4)

    import tempfile
    with tempfile.TemporaryDirectory() as tmp:
        audio_path = await asyncio.to_thread(_download_audio, tmp)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
        with open(audio_path, "rb") as f:
            resp = oai.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=f,
            )
        # –£ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π SDK –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ resp.text –∏–ª–∏ resp["text"]
        text = getattr(resp, "text", None) or getattr(resp, "text_output", None)
        if not text and isinstance(resp, dict):
            text = resp.get("text")
        return text or ""

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
app_tg.add_handler(CommandHandler("start", cmd_start))
app_tg.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

# ---------- FastAPI (webhook) ----------
class TelegramUpdate(BaseModel):
    update_id: int | None = None

app = FastAPI()

@fastapi_app.get("/")
async def health():
    return {"ok": True}

@fastapi_app.post(f"/webhook/{{secret}}")
async def webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    data = await request.json()
    update = Update.de_json(data, app_tg.bot)
    await app_tg.process_update(update)
    return {"ok": True}

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Cloud Run)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(fastapi_app, host="0.0.0.0", port=int(os.getenv("PORT", "8080")))
