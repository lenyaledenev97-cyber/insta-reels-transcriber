# main.py
import os
import re
import asyncio
import logging
from typing import List

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

from yt_dlp import YoutubeDL
from openai import OpenAI

# -------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Cloud Run ‚Üí Variables & Secrets) --------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET     = os.getenv("WEBHOOK_SECRET", "").strip()           # –≤–∞—à mysupersecret789
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY", "").strip()
ALLOWED_CHATS_RAW  = os.getenv("ALLOWED_CHATS", "").strip()            # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: "123,456"

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö)
ALLOWED_CHATS: List[int] = []
if ALLOWED_CHATS_RAW:
    try:
        ALLOWED_CHATS = [int(x) for x in ALLOWED_CHATS_RAW.split(",") if x.strip()]
    except Exception:
        ALLOWED_CHATS = []

# OpenAI –∫–ª–∏–µ–Ω—Ç
oai = OpenAI(api_key=OPENAI_API_KEY)

# -------- Telegram bot (python-telegram-bot v21) --------
tg_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –°—Å—ã–ª–∫–∏ –Ω–∞ Reels
RE_REELS = re.compile(
    r"(https?://(?:www\.)?instagram\.com/(?:reel|reels)/[^\s/?#]+(?:\?[^\s]*)?)",
    re.IGNORECASE
)

def chat_allowed(chat_id: int) -> bool:
    if not ALLOWED_CHATS:
        return True
    return chat_id in ALLOWED_CHATS

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not chat_allowed(update.effective_chat.id):
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels ‚Äî –≤–µ—Ä–Ω—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.\n"
        "–ú–æ–¥–µ–ª—å: gpt-4o-mini-transcribe üéôÔ∏è"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.effective_chat.id
    if not chat_allowed(chat_id):
        return

    text = (update.message.text or "").strip()
    m = RE_REELS.search(text)
    if not m:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    reels_url = m.group(1)
    await update.message.reply_text("–°–µ–∫—É–Ω–¥—É, —Å–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ –∏ –∑–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é‚Ä¶")

    try:
        transcript = await download_and_transcribe(reels_url)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        await update.message.reply_text(
            f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        )
        return

    if not transcript:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ üòï")
        return

    chunks = [transcript[i:i+3500] for i in range(0, len(transcript), 3500)]
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∏–∂–µ üëá")
    for i, ch in enumerate(chunks, 1):
        prefix = f"–ß–∞—Å—Ç—å {i}/{len(chunks)}:\n" if len(chunks) > 1 else ""
        await update.message.reply_text(prefix + ch)


async def download_and_transcribe(url: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É —á–µ—Ä–µ–∑ yt-dlp –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
    (–º–æ–¥–µ–ª—å: gpt-4o-mini-transcribe).
    """
    def _download_audio(tmpdir: str) -> str:
        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": os.path.join(tmpdir, "%(id)s.%(ext)s"),
            "quiet": True,
            "noprogress": True,
            # –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ffmpeg –µ—Å—Ç—å –≤ –æ–±—Ä–∞–∑–µ)
        }
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            return ydl.prepare_filename(info)

    import tempfile
    with tempfile.TemporaryDirectory() as tmp:
        audio_path = await asyncio.to_thread(_download_audio, tmp)
        with open(audio_path, "rb") as f:
            resp = oai.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=f,
            )
        text = getattr(resp, "text", None) or getattr(resp, "text_output", None)
        if not text and isinstance(resp, dict):
            text = resp.get("text")
        return text or ""

# -------- –†–æ—É—Ç—ã FastAPI (–≤–µ–±—Ö—É–∫ –¥–ª—è Cloud Run) --------
fastapi_app = FastAPI()

@fastapi_app.get("/")
async def health():
    return {"ok": True}

@fastapi_app.post(f"/webhook/{{secret}}")
async def webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    data = await request.json()
    update = Update.de_json(data, tg_app.bot)
    await tg_app.process_update(update)
    return {"ok": True}

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Cloud Run)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(fastapi_app, host="0.0.0.0", port=int(os.getenv("PORT", "8080")))
