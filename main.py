# main.py
import os
import asyncio
from typing import List

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET     = os.getenv("WEBHOOK_SECRET", "").strip()
ALLOWED_CHATS_RAW  = os.getenv("ALLOWED_CHATS", "").strip()

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ALLOWED_CHATS: List[int] = []
if ALLOWED_CHATS_RAW:
    try:
        ALLOWED_CHATS = [int(x) for x in ALLOWED_CHATS_RAW.split(",") if x.strip()]
    except Exception:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–ª—É—á—à–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –≤ Cloud Run)
        ALLOWED_CHATS = []

# ==== FastAPI ====
app = FastAPI(title="Insta Transcriber Bot")

@app.get("/")
async def root():
    # –ù–∞–ª–∏—á–∏–µ –∫–æ—Ä–Ω—è —Å 200 OK –ø–æ–º–æ–≥–∞–µ—Ç Cloud Run health-check
    return {"ok": True, "service": "insta-transcriber-bot"}

@app.get("/healthz")
async def healthz():
    return {"status": "ok"}

# ==== Telegram Application ====
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

def _allowed(chat_id: int) -> bool:
    return True if not ALLOWED_CHATS else (chat_id in ALLOWED_CHATS)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat or not _allowed(update.effective_chat.id):
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels ‚Äî –≤–µ—Ä–Ω—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.\n"
        "–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∂–∏–≤ üòâ"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat or not _allowed(update.effective_chat.id):
        return
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start, /help")

# –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∑–∂–µ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º —Ç—Ä–∞–Ω—Å-–∫—Ä–∏–ø—Ç)
async def any_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat or not _allowed(update.effective_chat.id):
        return
    text = (update.message.text or "").strip()
    if "instagram.com/reel" in text or "instagram.com/p/" in text:
        await update.message.reply_text("–ü—Ä–∏–Ω—è–ª —Å—Å—ã–ª–∫—É. –õ–æ–≥–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ üëç")
    else:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start_cmd))
application.add_handler(CommandHandler("help", help_cmd))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), any_text))

# ==== –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤ —Å–≤—è–∑–∫–µ —Å FastAPI ====
@app.on_event("startup")
async def on_startup():
    # –í–∞–∂–Ω–æ: initialize/start, —á—Ç–æ–±—ã application –±—ã–ª –≥–æ—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å update
    await application.initialize()
    await application.start()

@app.on_event("shutdown")
async def on_shutdown():
    await application.stop()
    await application.shutdown()

# ==== –ú–æ–¥–µ–ª—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–ø—Ä–∏–Ω–∏–º–∞–µ–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª) ====
class TelegramUpdate(BaseModel):
    root: dict

@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Forbidden")
    data = await request.json()
    update = Update.de_json(data, application.bot)
    # –ü–µ—Ä–µ–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –≤ PTB
    await application.process_update(update)
    return {"ok": True}
