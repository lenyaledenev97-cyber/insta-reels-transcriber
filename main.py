import os
import re
import asyncio
import tempfile
from typing import List, Optional

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "").strip()
ALLOWED_CHATS_RAW = os.getenv("ALLOWED_CHATS", "").strip()
TRANSCRIBE_MODEL = os.getenv("TRANSCRIBE_MODEL", "gpt-4o-mini-transcribe").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ALLOWED_CHATS: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º, –∫—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
ALLOWED_CHATS: List[int] = []
if ALLOWED_CHATS_RAW:
    try:
        ALLOWED_CHATS = [int(x) for x in ALLOWED_CHATS_RAW.split(",") if x.strip()]
    except Exception:
        ALLOWED_CHATS = []  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

# OpenAI SDK
from openai import OpenAI
oai = OpenAI(api_key=OPENAI_API_KEY)

# Telegram app (webhook-—Ä–µ–∂–∏–º)
tg_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# FastAPI
app = FastAPI(title="Insta Reels Transcriber")

# ----------------- –£—Ç–∏–ª–∏—Ç—ã -----------------
RE_ELIGIBLE_URL = re.compile(r"(https?://(www\.)?instagram\.com/reel/[^ \n]+)", re.IGNORECASE)

def split_text(text: str, limit: int = 3800) -> List[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–∂–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram (–æ–∫–æ–ª–æ 4096)."""
    parts, cur = [], []
    cur_len = 0
    for line in text.splitlines(True):
        if cur_len + len(line) > limit and cur:
            parts.append("".join(cur))
            cur, cur_len = [], 0
        cur.append(line)
        cur_len += len(line)
    if cur:
        parts.append("".join(cur))
    return parts

def user_allowed(chat_id: int) -> bool:
    return (not ALLOWED_CHATS) or (chat_id in ALLOWED_CHATS)

# ----------------- –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è -----------------
async def download_audio_from_instagram(url: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É –∏–∑ Reels —Å –ø–æ–º–æ—â—å—é yt-dlp.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É .mp3/.m4a
    """
    import yt_dlp

    tmpdir = tempfile.mkdtemp(prefix="reel_")
    outtmpl = os.path.join(tmpdir, "%(id)s.%(ext)s")

    ydl_opts = {
        "outtmpl": outtmpl,
        "format": "m4a/bestaudio/best",
        "postprocessors": [
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }
        ],
        "quiet": True,
        "noprogress": True,
    }

    loop = asyncio.get_event_loop()
    def _run():
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            # –ø–æ—Å–ª–µ –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –±—É–¥–µ—Ç mp3
            base = ydl.prepare_filename(info)
            mp3 = os.path.splitext(base)[0] + ".mp3"
            return mp3

    audio_path = await loop.run_in_executor(None, _run)
    return audio_path

async def transcribe_file(filepath: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ OpenAI –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –º–æ–¥–µ–ª—å gpt-4o-mini-transcribe (–±—ã—Å—Ç—Ä–æ/–¥—ë—à–µ–≤–æ).
    –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TRANSCRIBE_MODEL.
    """
    with open(filepath, "rb") as f:
        if TRANSCRIBE_MODEL.lower().startswith("whisper"):
            # —Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            res = oai.audio.transcriptions.create(
                file=f,
                model=TRANSCRIBE_MODEL,
                response_format="text",
            )
            return res  # —É–∂–µ —Å—Ç—Ä–æ–∫–∞
        else:
            # –Ω–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∞–π–±–µ—Ä
            res = oai.audio.transcriptions.create(
                file=f,
                model=TRANSCRIBE_MODEL,
                response_format="text",
            )
            return res

# ----------------- Telegram Handlers -----------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.message.chat_id
    if not user_allowed(chat_id):
        await update.message.reply_text("‚õî –≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
        return

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels ‚Äî –≤–µ—Ä–Ω—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.\n"
        "–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∂–∏–≤ üòâ"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.message.chat_id
    if not user_allowed(chat_id):
        return

    text = update.message.text or ""
    m = RE_ELIGIBLE_URL.search(text)
    if not m:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    url = m.group(1)
    msg = await update.message.reply_text("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ‚Ä¶ ‚è¨")

    try:
        audio_path = await download_audio_from_instagram(url)
        await msg.edit_text("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ‚Ä¶ üéß")

        transcript = await transcribe_file(audio_path)
        if not transcript.strip():
            await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç üòî")
            return

        parts = split_text(transcript)
        await msg.edit_text("–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç‚Ä¶ üìÑ")
        for i, p in enumerate(parts, 1):
            header = f"–ß–∞—Å—Ç—å {i}/{len(parts)}:\n" if len(parts) > 1 else ""
            await update.message.reply_text(header + p)

    except Exception as e:
        await msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
    finally:
        # –ø–æ–¥—á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if audio_path and os.path.exists(audio_path):
                os.remove(audio_path)
        except Exception:
            pass

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
tg_app.add_handler(CommandHandler("start", start_cmd))
tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# ----------------- Webhook -----------------
class TGUpdate(BaseModel):
    update_id: Optional[int] = None
    message: Optional[dict] = None

@app.post(f"/webhook/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="invalid json")

    update = Update.de_json(data, tg_app.bot)
    await tg_app.process_update(update)
    return {"ok": True}

@app.get("/healthz")
async def healthz():
    return {"status": "ok"}

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Cloud Run, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", "8080")))
