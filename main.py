import os
import re
import asyncio
import logging
from typing import List

from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)
from yt_dlp import YoutubeDL
from openai import OpenAI

logging.basicConfig(level=logging.INFO)

# ========= –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =========
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET     = os.getenv("WEBHOOK_SECRET", "").strip()
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY", "").strip()
ALLOWED_CHATS_RAW  = os.getenv("ALLOWED_CHATS", "").strip()  # "123,456" (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ALLOWED_CHATS: List[int] = []
if ALLOWED_CHATS_RAW:
    try:
        ALLOWED_CHATS = [int(x) for x in ALLOWED_CHATS_RAW.split(",") if x.strip()]
    except Exception:
        ALLOWED_CHATS = []

# OpenAI
oai = OpenAI(api_key=OPENAI_API_KEY)

# ========= Telegram =========
tg_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

RE_REELS = re.compile(
    r"(https?://(?:www\.)?instagram\.com/(?:reel|reels)/[^\s/?#]+(?:\?[^\s]*)?)",
    re.IGNORECASE,
)

def chat_allowed(chat_id: int) -> bool:
    return (not ALLOWED_CHATS) or (chat_id in ALLOWED_CHATS)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    if not chat_allowed(update.effective_chat.id):
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reels ‚Äî –≤–µ—Ä–Ω—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É. "
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∂–∏–≤ üòâ"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.effective_chat.id
    if not chat_allowed(chat_id):
        return

    text = (update.message.text or "").strip()
    m = RE_REELS.search(text)
    if not m:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Reels, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    reels_url = m.group(1)
    await update.message.reply_text("–°–µ–∫—É–Ω–¥—É, —Å–∫–∞—á–∏–≤–∞—é –∏ –∑–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é‚Ä¶")

    try:
        transcript = await download_and_transcribe(reels_url)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ: {e}\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        )
        return

    if not transcript:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ üòï")
        return

    # –¢–µ–ª–µ–≥—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è ~4096, —Ä–µ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
    chunks = [transcript[i:i+3500] for i in range(0, len(transcript), 3500)]
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∏–∂–µ üëá")
    for i, ch in enumerate(chunks, 1):
        prefix = f"–ß–∞—Å—Ç—å {i}/{len(chunks)}:\n" if len(chunks) > 1 else ""
        await update.message.reply_text(prefix + ch)

async def download_and_transcribe(url: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ—Ä–æ–∂–∫—É —Å –ø–æ–º–æ—â—å—é yt-dlp (bestaudio), –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI.
    –ú–æ–¥–µ–ª—å: gpt-4o-mini-transcribe.
    """

    def _download_audio(tmpdir: str) -> str:
        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": os.path.join(tmpdir, "%(id)s.%(ext)s"),
            "quiet": True,
            "noprogress": True,
            "nocheckcertificate": True,
            # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ yt-dlp —Å–∞–º –¥–µ—Ä–Ω–µ—Ç ffmpeg –¥–ª—è mux/–∫–æ–Ω
